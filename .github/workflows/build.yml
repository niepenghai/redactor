name: Build Cross-Platform Executables

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            artifact_name: redactor-windows
            asset_name: redactor-windows.exe
          - os: macos-latest
            artifact_name: redactor-macos
            asset_name: redactor-macos

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'


    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pywebview pyinstaller

    - name: Build executable (Windows)
      if: runner.os == 'Windows'
      run: |
        pyinstaller --onefile --windowed --name=redactor-windows redactor-gui.py
      
    - name: Build executable (macOS)
      if: runner.os == 'macOS'
      run: |
        pyinstaller --onefile --windowed --name=redactor-macos redactor-gui.py


    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          dist/redactor-windows.exe
          dist/redactor-macos

    - name: Upload to Google Drive
      if: success()
      run: |
        # Install Google API client
        pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib
        
        # Create upload script
        cat > upload_to_gdrive.py << 'EOF'
        import os
        import json
        from googleapiclient.discovery import build
        from googleapiclient.http import MediaFileUpload
        from google.oauth2 import service_account
        import sys
        from datetime import datetime
        
        def upload_file():
            # Parse service account credentials
            credentials_json = os.environ['GOOGLE_DRIVE_SERVICE_ACCOUNT']
            credentials_info = json.loads(credentials_json)
            credentials = service_account.Credentials.from_service_account_info(
                credentials_info, scopes=['https://www.googleapis.com/auth/drive.file']
            )
            
            # Build Drive service
            service = build('drive', 'v3', credentials=credentials)
            
            # Determine file to upload
            runner_os = os.environ['RUNNER_OS']
            github_sha = os.environ['GITHUB_SHA'][:7]
            date_str = datetime.now().strftime('%Y%m%d')
            
            if runner_os == 'Windows':
                file_path = 'dist/redactor-windows.exe'
                file_name = f'redactor-windows-{date_str}-{github_sha}.exe'
            elif runner_os == 'macOS':
                file_path = 'dist/redactor-macos'
                file_name = f'redactor-macos-{date_str}-{github_sha}'
            else:
                print(f"Unsupported OS: {runner_os}")
                sys.exit(1)
            
            if not os.path.exists(file_path):
                print(f"File not found: {file_path}")
                sys.exit(1)
            
            # Upload file
            folder_id = os.environ['GOOGLE_DRIVE_FOLDER_ID']
            file_metadata = {
                'name': file_name,
                'parents': [folder_id]
            }
            
            media = MediaFileUpload(file_path, resumable=True)
            file = service.files().create(
                body=file_metadata,
                media_body=media,
                fields='id'
            ).execute()
            
            print(f'File uploaded successfully. File ID: {file.get("id")}')
            print(f'File name: {file_name}')
        
        if __name__ == '__main__':
            upload_file()
        EOF
        
        # Run upload script
        python upload_to_gdrive.py
      env:
        GOOGLE_DRIVE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_DRIVE_SERVICE_ACCOUNT }}
        GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
        RUNNER_OS: ${{ runner.os }}
        GITHUB_SHA: ${{ github.sha }}

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/redactor-windows.exe
          dist/redactor-macos
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
name: Build Cross-Platform Executables

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write  # Required for creating releases and uploading assets
  packages: write  # Required for packages (if needed)
  actions: read    # Required for accessing workflow runs

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            artifact_name: redactor-windows
            asset_name: redactor-windows.exe
          - os: macos-latest
            artifact_name: redactor-macos
            asset_name: redactor-macos

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'


    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools
        
        # Install core dependencies first
        pip install numpy>=1.21.0
        pip install pillow>=9.0.0
        pip install PyMuPDF>=1.23.0
        
        # Note: spaCy not installed on Windows due to compilation issues
        # The application will automatically use simple NLP fallback
        
        # Install remaining dependencies
        pip install pywebview>=4.0
        pip install dataclasses-json>=0.5.0
        pip install pyinstaller
        
        # Verify PyMuPDF installation
        python -c "import fitz; print(f'PyMuPDF version: {fitz.version[0]}')"
        python -c "import tkinter; print('Tkinter available')"
        
        # List installed packages for debugging
        echo "=== Checking key packages ==="
        pip list | grep -E "(pymupdf|tkinter|pywebview|spacy|pillow|numpy)"
        echo "=== Full package list ==="
        pip list
        echo "=== Testing imports ==="
        python -c "import spacy; print('spaCy available')" && echo "✅ spaCy OK" || echo "❌ spaCy failed"
        python -c "import PIL; print('PIL available')" && echo "✅ PIL OK" || echo "❌ PIL failed"  
        python -c "import numpy; print('NumPy available')" && echo "✅ NumPy OK" || echo "❌ NumPy failed"
        python -c "import fitz; print('PyMuPDF available')" && echo "✅ PyMuPDF OK" || echo "❌ PyMuPDF failed"
        
        echo "=== Critical test - abort if core dependencies missing ==="
        python -c "import PIL, numpy, fitz; print('All critical dependencies available (spaCy is optional)')"

    - name: Build executable (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "Building Windows executable using spec file..."
        # Use Windows-specific spec file for consistent builds
        pyinstaller scripts/redactor-windows.spec
        
        echo "Windows build completed:"
        dir dist\
        echo "=== Contents of redactor-windows folder ==="
        dir dist\redactor-windows\
        echo "=== Contents of _internal folder ==="
        dir dist\redactor-windows\_internal\ | head -20
        echo "=== Total size breakdown ==="
        powershell -Command "Get-ChildItem dist\redactor-windows -Recurse | Group-Object Extension | Sort-Object Count -Descending | Select-Object Name, Count, @{Name='Size(MB)';Expression={[math]::Round((($_.Group | Measure-Object Length -Sum).Sum / 1MB), 2)}} | Format-Table"
        powershell -Command "'{0:N2} MB' -f ((Get-ChildItem dist\redactor-windows -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB)"
        
    - name: Create Windows Deployment Package
      if: runner.os == 'Windows'
      run: |
        # Create deployment folder
        mkdir windows-deployment-package
        
        # Copy entire redactor-windows folder (now contains exe + _internal)
        xcopy dist\redactor-windows windows-deployment-package\redactor-windows /E /I
        
        # Copy deployment files
        copy windows-deployment\README_Windows.md windows-deployment-package\
        copy windows-deployment\启动程序.bat windows-deployment-package\
        copy windows-deployment\部署说明.txt windows-deployment-package\
        
        # Create output folder
        mkdir windows-deployment-package\输出文件
        
        # Create zip package
        powershell Compress-Archive -Path windows-deployment-package\* -DestinationPath dist\PDF-Redactor-Windows-Offline.zip
      
    - name: Build executable (macOS)
      if: runner.os == 'macOS'
      run: |
        echo "Building macOS executable using spec file..."
        # Use the same spec file as local build from project root
        pyinstaller scripts/redactor.spec
        
        # Copy both the app bundle and standalone executable
        cp -r dist/PDFRedactor.app/Contents/MacOS/PDFRedactor dist/redactor-macos
        
        # Create zip of PDFRedactor.app for release
        cd dist/
        zip -r PDFRedactor-macOS.zip PDFRedactor.app
        
        echo "macOS build completed:"
        ls -la
        du -h redactor-macos PDFRedactor.app PDFRedactor-macOS.zip


    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          dist/redactor-windows/
          dist/redactor-macos
          dist/PDFRedactor.app
          dist/PDFRedactor-macOS.zip
          dist/PDF-Redactor-Windows-Offline.zip


    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/${{ matrix.asset_name }}
          dist/PDFRedactor-macOS.zip
          dist/PDF-Redactor-Windows-Offline.zip
        body: |
          ## Financial Document Redactor ${{ github.ref_name }}
          
          **Ready-to-use executables - no installation required!**
          
          ### Download Options:
          - 🪟 **Windows**: 
            - `PDF-Redactor-Windows-Offline.zip` - Complete offline package with all dependencies and documentation (recommended)
          - 🍎 **macOS**: 
            - `PDFRedactor-macOS.zip` - Native macOS application bundle (recommended)
            - `redactor-macos` - Standalone executable
          
          ### 🪟 Windows Offline Users:
          Download `PDF-Redactor-Windows-Offline.zip` for complete offline deployment:
          - ✅ Main executable + startup script
          - ✅ Chinese documentation and user guide  
          - ✅ No internet required
          - ✅ Perfect for corporate/restricted environments
          
          ### 🍎 macOS Usage Instructions:
          **For PDFRedactor-macOS.zip (recommended):**
          1. Download and unzip `PDFRedactor-macOS.zip`
          2. Double-click `PDFRedactor.app` to run
          3. If security warning appears: Right-click → "Open" → "Open"
          
          **For redactor-macos (alternative):**
          1. Right-click on `redactor-macos` → "Open" → "Open"
          2. Or use Terminal: `xattr -d com.apple.quarantine ./redactor-macos`
          
          ### Features:
          - ✅ PDF redaction with multiple modes (generic/realistic/custom)
          - ✅ Support for bank statements, W2s, tax returns, pay stubs
          - ✅ Redacts SSN, account numbers, names, addresses
          - ✅ Professional GUI interface
          - ✅ Real-time processing with detailed reporting
          
          ### Usage:
          1. Download the appropriate executable for your OS
          2. Double-click to run (no installation needed)
          3. Select PDF files and output folder
          4. Choose redaction mode and process!
          
          **Note**: This release contains only executables, no source code.
        
    - name: Upload Windows Deployment Package
      if: startsWith(github.ref, 'refs/tags/v') && runner.os == 'Windows'
      uses: softprops/action-gh-release@v1
      with:
        files: dist/PDF-Redactor-Windows-Offline.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Remove Source Code from Release
      if: startsWith(github.ref, 'refs/tags/v') && matrix.os == 'windows-latest'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Get release by tag
          const { data: release } = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: context.ref.replace('refs/tags/', '')
          });
          
          // Find source code assets
          const sourceAssets = release.assets.filter(asset => 
            asset.name.includes('Source code')
          );
          
          // Delete source code assets
          for (const asset of sourceAssets) {
            console.log(`Deleting: ${asset.name}`);
            await github.rest.repos.deleteReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              asset_id: asset.id
            });
          }
          
          console.log(`Removed ${sourceAssets.length} source code assets`);